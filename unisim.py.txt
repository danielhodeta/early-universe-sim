import pygame
import random
import math

#PARAMETERS
PARTICLE_NUMBER = 100
WIDTH = 700
HEIGHT = 600
G_CONST = 1

#Set screen
screen = pygame.display.set_mode((WIDTH, HEIGHT))

#Particle Class 
class Particle:
    def __init__(self, type):
        self.type= type  
        #Position init
        self.x = random.randint(0, WIDTH)
        self.y = random.randint(0, HEIGHT)
        #Color init 
        if (type == 'matter'):
            self.color = (255,255,255)
        elif (type == 'anti_matter'):
            self.color = (50,50,255)
        elif (type == 'photon'):
            self.color = (255, 166, 83)
            
        else:
            self.color = (0,0,0) 
        #Velocity init
        self.speedX = 0#random.uniform (-1,1)
        self.speedY = 0#random.uniform (-1,1)
        #Acceleration vector
        self.vectors = []
        for i in range(PARTICLE_NUMBER):
            self.vectors.append([0,0])
        #Mass init
        if (type == 'photon'):
            self.mass = 0
        else:
            self.mass = 1

        self.size = self.mass
    
    def display(self):
        pygame.draw.circle(screen, self.color, (int(self.x),int(self.y)), self.size, self.size)
    def move(self):
        for vector in self.vectors:
            self.speedX += vector[0]
            self.speedY += vector[1]

        #attributes for no bounds
        self.x = (self.x + self.speedX)
        self.y = (self.y + self.speedY)

        #attributes for virtual torus
        # self.x = (self.x + self.speedX) % WIDTH
        # self.y = (self.y + self.speedY) % HEIGHT

        #self.y bound for bottom gravity
        # if (self.y >= HEIGHT-self.size):
        #     self.y = HEIGHT - self.size
        # else:
        #     self.y = (self.y + self.speedY)
    
    def macro_gravity(self, particles):
        for i in range (len(particles)):
            dx = particles[i].x - self.x
            dy = particles[i].y - self.y
            r2 = math.pow(dx, 2) + math.pow(dy, 2)
            angle = abs(math.asin(dy/math.sqrt(r2)))

            #Collision condition
            if (r2 <= math.pow(self.size+particles[i].size, 2)):
                Force = 0
                self.vectors[i] = ([0, 0])
            #Normal condition
            else: 
                Force = (G_CONST * self.mass * particles[i].mass)/(r2)
                signX = 1 if dx==0 else dx/abs(dx)
                signY = 1 if dy==0 else dy/abs(dy)
                ForceX = Force*math.cos(angle)*signX
                ForceY = Force*math.sin(angle)*signY
                self.vectors[i] = ([ForceX, ForceY])
def createParticles(matter_flag, anti_matter_flag, photon_flag):
    particles = []
    ## Create particles
    for n in range(int(PARTICLE_NUMBER/3)):
        if matter_flag:
            particle = Particle("matter")
            particles.append(particle)
        if anti_matter_flag:
            particle = Particle("anti_matter")
            particles.append(particle)
        if photon_flag:
            particle = Particle("photon")
            particles.append(particle)

    return particles
    
def main():
    #Set Title and Icon
    pygame.display.set_caption('Early Universe Simulator')
    icon = pygame.image.load('icon.png')
    pygame.display.set_icon(icon) 

    particles = createParticles(1,1,0)

    #Simulation loop
    running = True
    while running:
        screen.fill((0,0,0))
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
        
        #Display particles
        for i in range(len(particles)):
            particles[i].macro_gravity(particles[:i]+particles[i+1:])
            particles[i].move()
            particles[i].display()
        
        pygame.display.update()

if __name__ == "__main__":
    main()